ttChooseTime()
ttChooseTime()
ttChooseTime <- function(){
clrCallStatic('RHost.FdkQuotes', 'ChooseTime')
}
ttChooseTime()
ttChooseTime <- function(){
clrCallStatic('RHost.FdkQuotes', 'ChooseTime')
}
ttChooseTime()
#' Gets a proper formatted time
#'
#' @export
ttChooseTime <- function(){
clrCallStatic('RHost.FdkQuotes', 'ChooseTime')
}
ttChooseTime()
ttInit <- function() {
library(rClr)
if (!require("jsonlite"))
install.packages("jsonlite", repos="http://cran.rstudio.com/")
library(jsonlite)
fileName <-system.file("data","RHost.dll", package="FdkRLib")
clrLoadAssembly(fileName)
}
ttInit()
ttChooseTime()
#' Initialize the CLR runtime and loads the FDK host assembly
#'
#' @export
ttInit <- function() {
library(rClr)
if (!require("jsonlite"))
install.packages("jsonlite", repos="http://cran.rstudio.com/")
library(jsonlite)
fileName <-system.file("data","RHost.dll", package="FdkRLib")
clrLoadAssembly(fileName)
}
#' Gets a proper formatted time
#'
#' @export
ttChooseTime <- function(){
clrCallStatic('RHost.FdkQuotes', 'ChooseTime')
}
ttInit()
ttChooseTime()
ttInit <- function() {
library(rClr)
if (!require("jsonlite"))
install.packages("jsonlite", repos="http://cran.rstudio.com/")
library(jsonlite)
fileName <-system.file("data","RHost.dll", package="FdkRLib")
clrLoadAssembly(fileName)
}
ttChooseTime <- function(){
clrCallStatic('RHost.FdkQuotes', 'ChooseTime')
}
ttInit()
t = ttChooseTime()
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/install.r')
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
library(FdkRLib)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
ttChooseTime()
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
library(FdkRLib)
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
---
library(FdkRLib)
library(FdkRLib)
ttConnect("", "", "")
bars = ttGetBars("EURUSD", "Bid", "H1")
quotes = ttGetQuotes("EURUSD", "2051-05-05", "2015-05-06", 1)
library(FdkRLib)
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
summary(cars)
install.packages("manipulate")
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
library(FdkRLib)
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
summary(cars)
library(FdkRLib)
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
remove.packages("rClr", lib="~/R/win-library/3.2")
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/dist/rClr_0.7-4.zip", repos = NULL)
library(FdkRLib)
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
library(rClr)
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
library(FdkRLib)
ttConnect(fdkPath = "c:\\FdkCaches\\Cache1")
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/R/FdkRLib.R')
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/R/FdkRLib.R')
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/R/FdkRLib.R')
library("FdkRLib", lib.loc="~/R/win-library/3.2")
library(FdkRLib)
ttConnect("", "", "")
ttConnect("", "", "")
ttConnect("", "", "")
library(FdkRLib)
ttConnect("", "", "")
library("rClr", lib.loc="~/R/win-library/3.2")
ttConnect("", "", "")
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
library(FdkRLib)
ttConnect("", "", "")
quotes = ttGetQuotes("EURUSD", "2051-05-05", "2015-05-06", 1)
quotes = ttGetQuotes("EURUSD", "05/05/2015", "05/06/2015", 1)
View(quotes)
quotes <- ttGetQuotes("EURUSD", "05/05/2015", "05/06/2015", 1)
quotes <- ttGetQuotes("EURUSD", "05/05/2015", "05/07/2015", 1)
plot(quotes$ask, type="o")
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/R/FdkRLib.R')
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
library("FdkRLib", lib.loc="~/R/win-library/3.2")
remove.packages("FdkRLib", lib="~/R/win-library/3.2")
install.packages("D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/FdkRLib_1.0.20150513.zip", repos = NULL)
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
ttConnect("", "", "")
ttConnect()
ttConnect()
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
ttConnect()
remove.packages("FdkRLib", lib="~/R/win-library/3.2")
installBinary("rClr_0.7-4.zip")
installBinary("FdkRLib_1.0.20150513.zip")
library(FdkRLib)
ttConnect()
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("rClr_0.7-4.zip")
library(rClr)
file.remove(fdkRLibPackage)
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
ttConnect()
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
startTime <- ttGetEpochFromText("05/05/2015")
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
endTime <- ttGetEpochFromText("05/07/2015")
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
ttGetEpochFromText <- function(currentTime) {
clrCallStatic('RHost.FdkHelper', 'GetCreatedEpochFromText', currentTime)
}
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
ttGetEpochFromText <- function(currentTime) {
clrCallStatic('RHost.FdkHelper', 'GetCreatedEpochFromText', currentTime)
}
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
library(FdkRLib)
ttConnect()
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
ttConnect()
bars = ttGetBars("EURUSD", "Bid", "H1")
boxplot(bars$highs)
plot(highs, data = bars)
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
source('D:/Work/FDK/trunk/Concepts/Fdk2R/FdkGit/trunk/R/FdkRLib.R')
source("R/FdkRLib.R")
library(FdkRLib)
ttConnect()
bars = ttGetBars("EURUSD", "Bid", "H1")
boxplot(bars$highs)
plot(highs, data = bars)
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("rClr_0.7-4.zip")
library(rClr)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
library(FdkRLib)
ttConnect()
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
remove.packages("FdkRLib", lib="~/R/win-library/3.2")
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
download.file(fullUrl, fdkRLibPackage)
install.packages(fdkRLibPackage, repos = NULL, type = "source")
file.remove(fdkRLibPackage)
}
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
startTime <- ttGetEpochFromText("05/05/2015")
endTime <- ttGetEpochFromText("05/07/2015")
quotes <- ttGetQuotes("EURUSD", startTime, endTime, 1)
plot(quotes$ask, type="o")
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
installBinary <- function(fdkRLibPackage){
basicUrl = "https://github.com/SoftFx/FdkRLib/raw/master/dist/"
fullUrl = paste(basicUrl, fdkRLibPackage, sep = "")
localTempFile <-tempfile()
download.file(fullUrl, localTempFile)
install.packages(localTempFile, repos = NULL, type = "source")
file.remove(localTempFile)
}
installBinary("FdkRLib_1.0.20150518.zip")
library(FdkRLib)
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskHigh <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskHigh', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskLow <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskLow', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskOpen <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskOpen', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskClose <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskClose', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskVolume <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskVolume', barsPairVar)
}
source('~/.active-rstudio-document')
#' @param symbol Symbol looked
#' Gets the bars' low as requested
#'
#' @param symbol Symbol looked
#' @param priceTypeStr Ask
#' @param barPeriodStr Values like: M1, H1
#' @export
ttGetBarPairs <- function(symbol,priceTypeStr, barPeriodStr){
bars = ComputeGetPairBars(symbol, priceTypeStr, barPeriodStr);
askhighs = GetBarsAskHigh(bars);
asklows = GetBarsAskLow(bars);
askopen = FdkBars.GetBarsAskOpen(bars);
askClose = FdkBars.GetBarsAskClose(bars);
askVolume = FdkBars.GetBarsAskVolume(bars);
bidhighs = FdkBars.GetBarsBidHigh(bars);
bidlows = FdkBars.GetBarsBidLow(bars);
bidOpen = FdkBars.GetBarsBidOpen(bars);
bidClose = FdkBars.GetBarsBidClose(bars);
bidVolume = FdkBars.GetBarsBidVolume(bars);
UnregisterVar(symbolBars)
data.frame(askhighs, asklows, askopen, askClose, askVolume,
bidhighs, bidlows, bidOpen, bidClose, bidVolume)
}
#' Gets the bars' low as requested
#'
#' @param symbol Symbol looked
#' @param barPeriodStr Values like: M1, H1
#' @param startTimeEpoch Epoch time
#' @param endTimeEpoch Epoch time
#' @export
ttGetBarPairsRange <- function(symbol, barPeriodStr, startTimeEpoch, endTimeEpoch){
bars = ComputeGetPairBarsRange(symbol, barPeriodStr, startTimeEpoch, endTimeEpoch);
askhighs = GetBarsAskHigh(bars);
asklows = GetBarsAskLow(bars);
askopen = FdkBars.GetBarsAskOpen(bars);
askClose = FdkBars.GetBarsAskClose(bars);
askVolume = FdkBars.GetBarsAskVolume(bars);
bidhighs = FdkBars.GetBarsBidHigh(bars);
bidlows = FdkBars.GetBarsBidLow(bars);
bidOpen = FdkBars.GetBarsBidOpen(bars);
bidClose = FdkBars.GetBarsBidClose(bars);
bidVolume = FdkBars.GetBarsBidVolume(bars);
UnregisterVar(symbolBars)
data.frame(askhighs, asklows, askopen, askClose, askVolume,
bidhighs, bidlows, bidOpen, bidClose, bidVolume)
}
#' Gets the bars pairs as requested
#'
#' @param symbol Symbol looked
#' @param barPeriodStr Values like: M1, H1
#' @param startTimeEpoch Epoch time
#' @export
ComputeGetPairBars <- function( symbol, barPeriodStr, startTimeEpoch) {
clrCallStatic('RHost.FdkBars', 'ComputeGetPairBars', symbol, barPeriodStr, startTimeEpoch)
}
#' Gets the bars pairs as requested
#'
#' @param symbol Symbol looked
#' @param barPeriodStr Values like: M1, H1
#' @param startTimeEpoch Epoch time
#' @param endTimeEpoch Epoch time
#' @export
ComputeGetPairBarsRange <- function(symbol, barPeriodStr, startTimeEpoch, endTimeEpoch) {
clrCallStatic('RHost.FdkBars', 'ComputeGetPairBarsRange', symbol, barPeriodStr, startTimeEpoch, endTimeEpoch)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskHigh <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskHigh', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskLow <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskLow', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskOpen <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskOpen', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskClose <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskClose', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsAskVolume <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsAskVolume', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsBidHigh <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsBidHigh', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsBidLow <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsBidLow', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsBidOpen <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsBidOpen', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsBidClose <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsBidClose', barsPairVar)
}
#' Gets the bars' ask as requested
#'
#' @param quotesVar RHost variable that stores quotes array
GetBarsBidVolume <- function(barsPairVar) {
clrCallStatic('RHost.FdkBars', 'GetBarsBidVolume', barsPairVar)
}
ttGetBarPairs('EURUSD', 'Ask', 'M1')
#' Initialize the CLR runtime and loads the FDK host assembly
#'
#' @export
ttInit <- function() {
library(rClr)
if (!require("jsonlite"))
install.packages("jsonlite", repos="http://cran.rstudio.com/")
library(jsonlite)
fileName <-system.file("data","RHost.dll", package="FdkRLib")
clrLoadAssembly(fileName)
}
#' Connects to a TT server
#'
#' @param address Url of the running server
#' @param login Account number you login
#' @param password Password for the account you login
#' @export
ttConnect <- function(address = "", login= "", password= "", fdkPath = "") {
ttInit()
clrCallStatic('RHost.FdkHelper', 'ConnectToFdk', address, login, password, fdkPath)
}
#' Disconnect from a TT server
#'
#' @param address Url of the running server
#' @param login Account number you login
#' @param password Password for the account you login
#' @export
ttDisconnect <- function() {
ttInit()
clrCallStatic('RHost.FdkHelper', 'Disconnect')
}
ttGetBarPairs('EURUSD', 'Ask', 'M1')
ttConnect()
ttGetBarPairs('EURUSD', 'Ask', 'M1')
